<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on Nathan's Blog</title><link>mayn.es/categories/Tutorials/</link><description>Recent content in Tutorials on Nathan's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 03 Apr 2021 07:54:57 -0400</lastBuildDate><atom:link href="mayn.es/categories/Tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Dynamically Set ORM Schemas via Sqlalchemy</title><link>mayn.es/post/2021-04-03-dynamically-set-schemas-sqlalchemy/</link><pubDate>Sat, 03 Apr 2021 07:54:57 -0400</pubDate><guid>mayn.es/post/2021-04-03-dynamically-set-schemas-sqlalchemy/</guid><description>Sometimes the solution to a problem is so obvious, it takes a while to figure it out. I recently stumbled on such a problem when trying to configure a set of Object Relational Mappings (ORM) to support an application with the same set of table objects across different schemas in Postgres. Developing an ORM to support this pattern, a multi-tenant database model, proved challenging because of where I started. Below, I will detail the correct way to support the multi-tenant pattern as well as various approaches I came across and why they should not be used.</description></item><item><title>Speed Up Your REST Workflows with asyncio</title><link>mayn.es/2020/08/01/speed-up-your-rest-workflows-with-asyncio/</link><pubDate>Sat, 01 Aug 2020 03:02:22 +0000</pubDate><guid>mayn.es/2020/08/01/speed-up-your-rest-workflows-with-asyncio/</guid><description>I have been waiting for a project that would allow me to dig into the Pythonâ€™s asyncio library. Recently, such a project presented itself. I was tasked with hitting a rate limited REST API with just under 4 million requests. My first attempt was simple. Gather and build a block of search queries, POST each one to the API, process the results, and finally insert them in a database. Here is what the code looked like:</description></item></channel></rss>
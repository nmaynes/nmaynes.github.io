<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Nathan's Blog</title><link>/tags/python/</link><description>Recent content in python on Nathan's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 30 Dec 2021 16:35:34 -0500</lastBuildDate><atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Working With File Like Objects in Lambda</title><link>/post/2021-12-30-file-like-objects-in-lambda/</link><pubDate>Thu, 30 Dec 2021 16:35:34 -0500</pubDate><guid>/post/2021-12-30-file-like-objects-in-lambda/</guid><description>I recently started working on a workflow for picking up files from S3, processing them, and writing the results to another S3 location. This is a common pattern in data processing pipelines and our team wanted to see whether we could do it using AWS serverless services. We were able to get it running via Lambda functions and event triggers published to an AWS EventHub. The entire workflow was fairly easy to stand up once we grasped how the various services worked together.</description></item><item><title>Speed Up Your REST Workflows with asyncio</title><link>/2020/08/01/speed-up-your-rest-workflows-with-asyncio/</link><pubDate>Sat, 01 Aug 2020 03:02:22 +0000</pubDate><guid>/2020/08/01/speed-up-your-rest-workflows-with-asyncio/</guid><description>I have been waiting for a project that would allow me to dig into the Python’s asyncio library. Recently, such a project presented itself. I was tasked with hitting a rate limited REST API with just under 4 million requests. My first attempt was simple. Gather and build a block of search queries, POST each one to the API, process the results, and finally insert them in a database. Here is what the code looked like:</description></item><item><title>A Simple Progress Bar in Python</title><link>/2019/04/18/a-simple-progress-bar-in-python/</link><pubDate>Thu, 18 Apr 2019 18:33:32 +0000</pubDate><guid>/2019/04/18/a-simple-progress-bar-in-python/</guid><description>Recently, I have been working with the Requestslibrary in Python. I wrote a simple function to pull down a file that took more than a minute to download. While waiting for the download to complete I realized it would be nice to have some insight into the download’s progress. A quick search on StackOverflow led to an excellent example. Below is a simple way to display a progress bar while downloading a file.</description></item></channel></rss>